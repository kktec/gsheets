kktec/gsheets is a Groovy DSL wrapper over Apache POI based on code forked from andresteingress/gsheets.

It can be used to declaratively build or parse spreadsheets.

The original code, ExcelFile, does not support xml spreadsheets and is provided as a convenience and to provide building functionality not yet provided.

0.3 adds grid parsing functionality for declaratively reading spreadsheets. 

It assumes a simple grid on the first worksheet originating at rowIndex 0 and columnIndex 0, but this will probably be expanded to support use arbitrary worksheets and grid placement.

Plans as of 2013-07 include enhanced parsing integration tests, additional spreadsheet building features, and better documentation.

Check the tests for more complete examples of usage. There are main methods on the tests that can be used to demonstrate building and parsing spreadsheets.



A simple example of building a Workbook with a Sheet with 1 header row and 3 data rows of 4 columns:

Workbook workbook = builder.workbook {
	workbook {
		def fmt = new SimpleDateFormat('yyyy-MM-dd', Locale.default)
		sheet('sheet 1') {
			row('Name', 'Date', 'Count', 'Value', 'Active')
			row('a', fmt.parse('2012-09-12'), 69, 12.34, true)
			row('b', fmt.parse('2012-09-13'), 666, 43.21, false)
		}
	}	
}

File file = new File(name)
if (!file.exists()) {
	file.createNewFile()
}
OutputStream out = new FileOutputStream(file)
workbook.write out
out.close()




A simple example of a parsing a Workbook that pulls in all physically existing rows, disregarding header rows, with columns of various simple types as a List of Maps:

FileInputStream ins = new FileInputStream('demo.xlsx')
Workbook workbook = new XSSFWorkbook(ins)
WorkbookParser parser = new WorkbookParser(workbook)
List data = parser.grid {
    headerRows 1
	columns name: String, date: Date, count: Integer, value: BigDecimal, active: Boolean
}

If you don't like a provided conversion or need a new one, you can replace an existing one or provide a new one by adding a line to your parsing Closure:
    convertor('toUpper') { it.toString().toUpperCase() }

As to error handling, parsing will fail fast on an unsupported conversion or collect a List of individual cell data conversion errors. 
 
